	My proudest professional achievement would have to be a 'green-field' project I got to work on a few years back. In that project, I was tasked with creating a document-discovery pipeline that would handle inputs of large document stores, scan them for PII and mark any incidents, then index those documents in an ElasticSearch data store. I also needed to implement an ability to highlight any instances within the document for "quick-scanning" purposes.
	The reason this project was so important to me was that it was the first time I had the opportunity in a work environment to start from scratch and build an entire pipeline project for a solution that didn't exist yet. Assembling the various parts of the pipeline was the "easy" part, as we were building this project in a .NET Core application, which was still very new at the time, as well as having to learn how to utilize ElasticSearch and all of its capabilities, in spite of its notoriously horrendous documentation.
	By accepting RabbitMQ messages into the scanning service asychronously, I was able to process a large volume (~25 terabytes) of documents at reasonably fast speeds by the time my work on the project was wrapping up. The accuracy of scanning achieved was in the neighborhood of 75%, which was approaching levels of accuracy accepted by Microsoft in their Office suite of applications for PII scanning accuracy. This was another proud moment in the development of this project because it was not anticipated that such high numbers would be feasible so early on.
	I developed this project mostly independently, with some assistance from my team lead and mentor. It was encouraging to develop alongside a well-learned senior engineer and be able to speak confidently about the code I had written, and how it was accomplishing what it was expected to do, with a little guidance.
	The project included the use of FluentValidation, which was also a new technology that had to be learned in order to implement it effectively. We were also able to utilize the "live testing" feature in XUnit, to be able to continuously unit-test code as we were developing and get constant feedback. In all, I'd say this project was a great learning experience not only about the techonology, but about my own abilities to learn and grow as a developer.
	
	
	
	Something I've read recently that I would recommend is a book called "Rebooting AI: Building Artificial Intelligence We Can Trust." I enjoyed this book immensely for the topic itself. I think there's a lot of confusion about what actually constitues 'AI', but since that seems to be the way technology is headed, it's important to try to fully understand it, its limitations, its potential, and most of all, whether it's actually "intelligence."
	Having recently watched "The Imitation Game," the story of Alan Turing during WWII, I became interested in the idea of artificial intelligence. This book does a pretty thorough job of describing the ways we mistake higher-level functioning by a computer as "intelligence." For example, we have computers that can play chess and even beat grandmaster at Go, as well as score victory at Jeopardy, but even though these machines are functioning performatively at very high levels, they still aren't technically what would be defined as "intelligent." Much of this has to do with open-ended creativity and stylistic approaches to solving complex problems.
	The book delves into asking questions about where this technology potentially could take us in the future, if we are able to move beyond statistical analysis and data collections as our sole measure of an "intelligent" computer. At some point, the authors say, we have to begin to craft machines possessive of "common sense" and actual "understanding," which are both difficult concepts even by human standards of comprehension. To this end, there is still much work to be done, however the promise of a truly wondrous future still awaits if we can think less "scientifically" and more "humanly" in our efforts to craft the perfect thinking machine.
	I guess that's one of the reasons I got into programming in the first place -- the unlimited potential of creativity, leading to some "better tomorrow" that's based more on how far we can go rather than how much reward we can reap. Artificial Intelligence seems to me the ultimate test of mankind's ability to truly create something for the sake of creation, without ulterior motives.	
	
	
	
	If I had to explain to my grandmother what Availity does, I would begin by asking her questions about how she thinks insurance works. Then I would ask her what happens when insurance companies have to reimburse medical providers, or vice versa.
	I think at that point, I woudld begin to tell her that Availity is a company that handles all of the transactions and responsibilities of making sure that insurance companies and health care facilities can easily allow their transactions to be managed automatically, saving time and money for both parties. Availity uses data and the power of computers to not only process transactions, but to provide communication and simplify processes so that the stress of managing all the complexities she no doubt has uncovered can be minimized.
	Availity could make it easier for her to understand her medical and insurance expenses, for example, since rather than dealing with multiple hospitals, doctors, insurance agents, etc., all calling her for their payments and sending letters to her in the mail, she would be able to have one place where she can go and see all of the transactions, charges, payments, etc., as well as all the communication sent to her and communications she has sent. She would be able to see the real-time status of any bills or payments, and use that information to adjust her budgeting, or even manage her own medical care more efficiently.
	I suppose I would try to describe it to her as a "one-stop shop" for all of her medical financial needs and questions. Then I would explain to her that she's basically a metaphor for an insurance company dealing with numerous health facilities and care providers, and that Availity helps them in a similar fashion to manage their transactions, and give them a better way to improve their processes and see a "bigger picture" with the data provided.
